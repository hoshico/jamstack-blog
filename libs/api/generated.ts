/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * microCMS Blog API
 * OpenAPI spec version: 1.0.0
 */
export type BlogCategoryItem = {
  id?: string;
  name?: string;
};

export type BlogPhoto = {
  url?: string;
  height?: number;
  width?: number;
};

export interface Blog {
  id?: string;
  title?: string;
  body?: string;
  category?: BlogCategoryItem[];
  publishedAt?: string;
  photo?: BlogPhoto;
}

export interface BlogList {
  contents?: Blog[];
  totalCount?: number;
  offset?: number;
  limit?: number;
}

export type CategoryImage = {
  url?: string;
  height?: number;
  width?: number;
};

export interface Category {
  id?: string;
  name?: string;
  image?: CategoryImage;
}

export interface CategoryList {
  contents?: Category[];
  totalCount?: number;
  offset?: number;
  limit?: number;
}

export type GetBlogsParams = {
limit?: number;
};

export type GetBlogs200 = {
  data?: BlogList;
};

export type GetCategories200 = {
  data?: CategoryList;
};

/**
 * @summary Get Blog List
 */
export type getBlogsResponse200 = {
  data: GetBlogs200
  status: 200
}
    
export type getBlogsResponseComposite = getBlogsResponse200;
    
export type getBlogsResponse = getBlogsResponseComposite & {
  headers: Headers;
}

export const getGetBlogsUrl = (params?: GetBlogsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://2525hoshi.microcms.io/api/v1/blog?${stringifiedParams}` : `https://2525hoshi.microcms.io/api/v1/blog`
}

export const getBlogs = async (params?: GetBlogsParams, options?: RequestInit): Promise<getBlogsResponse> => {
  
  const res = await fetch(getGetBlogsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getBlogsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getBlogsResponse
}



/**
 * @summary Get Blog by ID
 */
export type getBlogByIdResponse200 = {
  data: Blog
  status: 200
}
    
export type getBlogByIdResponseComposite = getBlogByIdResponse200;
    
export type getBlogByIdResponse = getBlogByIdResponseComposite & {
  headers: Headers;
}

export const getGetBlogByIdUrl = (id: string,) => {


  

  return `https://2525hoshi.microcms.io/api/v1/blog/${id}`
}

export const getBlogById = async (id: string, options?: RequestInit): Promise<getBlogByIdResponse> => {
  
  const res = await fetch(getGetBlogByIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getBlogByIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getBlogByIdResponse
}



/**
 * @summary Get Category List
 */
export type getCategoriesResponse200 = {
  data: GetCategories200
  status: 200
}
    
export type getCategoriesResponseComposite = getCategoriesResponse200;
    
export type getCategoriesResponse = getCategoriesResponseComposite & {
  headers: Headers;
}

export const getGetCategoriesUrl = () => {


  

  return `https://2525hoshi.microcms.io/api/v1/category`
}

export const getCategories = async ( options?: RequestInit): Promise<getCategoriesResponse> => {
  
  const res = await fetch(getGetCategoriesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getCategoriesResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getCategoriesResponse
}
